#!/bin/bash

read -p "Enter game name: " GAME_NAME
while [ -z "$GAME_NAME" ]; do
    read -p "Game name cannot be empty. Enter game name: " GAME_NAME
done

read -p "Enter display name (leave empty to use game name): " GAME_DISPLAY_NAME
GAME_DISPLAY_NAME=${GAME_DISPLAY_NAME:-$GAME_NAME}

GAME_NAME_UPPER=$(echo "$GAME_NAME" | tr '[:lower:]' '[:upper:]')

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
TEMPLATE_DIR="$PROJECT_ROOT/config/games"
GAMES_DIR="$PROJECT_ROOT/games"
TARGET_DIR="$GAMES_DIR/$GAME_NAME"

if [ -d "$TARGET_DIR" ]; then
    echo "Error: Game '$GAME_NAME' already exists in $TARGET_DIR"
    exit 1
fi

echo "Creating new game: $GAME_NAME ($GAME_DISPLAY_NAME)"
echo "Target directory: $TARGET_DIR"

mkdir -p "$TARGET_DIR"

if [[ "$(uname)" == "Darwin" ]] && command -v gsed &> /dev/null; then
    SED_CMD="gsed"
else
    SED_CMD="sed"
fi

copy_and_replace() {
    local src="$1"
    local dst="$2"
    if [[ "$src" == *.in ]]; then
        local dst_clean="${dst%.in}"
        $SED_CMD -e "s/@GAME_NAME@/$GAME_NAME/g" \
                 -e "s/@GAME_DISPLAY_NAME@/$GAME_DISPLAY_NAME/g" \
                 -e "s/@GAME_NAME_UPPER@/$GAME_NAME_UPPER/g" \
                 "$src" > "$dst_clean"
        echo "  Generated: $dst_clean"
    else
        cp -r "$src" "$dst"
        echo "  Copied: $dst"
    fi
}

find "$TEMPLATE_DIR" -type f | while read -r file; do
    rel_path="${file#$TEMPLATE_DIR/}"
    target_file="$TARGET_DIR/$rel_path"
    target_dir=$(dirname "$target_file")
    mkdir -p "$target_dir"
    copy_and_replace "$file" "$target_file"
done

find "$TEMPLATE_DIR" -type d | while read -r dir; do
    rel_path="${dir#$TEMPLATE_DIR/}"
    if [ -n "$rel_path" ]; then
        mkdir -p "$TARGET_DIR/$rel_path"
    fi
done

BUILD_DIR="$TARGET_DIR/build"
mkdir -p "$BUILD_DIR"

if [[ "$(uname)" == "Darwin" ]] && command -v xcodebuild &> /dev/null; then
    GENERATOR="Xcode"
else
    GENERATOR="Unix Makefiles"
fi

cmake -B "$BUILD_DIR" -G "$GENERATOR" -DCMAKE_BUILD_TYPE=Debug

echo ""
echo "Game '$GAME_NAME' created successfully at $TARGET_DIR"

if [[ "$GENERATOR" == "Xcode" ]]; then
    echo "Build with: cmake --build $BUILD_DIR --config Debug"
else
    if [[ "$(uname)" == "Darwin" ]]; then
        CPU_COUNT=$(sysctl -n hw.ncpu)
    else
        CPU_COUNT=$(nproc)
    fi
    echo "Build with: cmake --build $BUILD_DIR -j$CPU_COUNT"
fi
